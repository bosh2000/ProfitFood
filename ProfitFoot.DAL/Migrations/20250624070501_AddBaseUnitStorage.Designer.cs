// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProfitFoot.DAL;

#nullable disable

namespace ProfitFood.DAL.Migrations
{
    [DbContext(typeof(ProfitFoodDbContext))]
    [Migration("20250624070501_AddBaseUnitStorage")]
    partial class AddBaseUnitStorage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("ProfitFood.Model.DBModel.BaseUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BaseUnits");
                });

            modelBuilder.Entity("ProfitFood.Model.DBModel.BaseUnitStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BaseUnitsStorage");
                });

            modelBuilder.Entity("ProfitFood.Model.DBModel.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BaseUnitId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BaseUnitStorageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("BaseUnitStorageId");

                    b.HasIndex("GroupId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProfitFood.Model.DBModel.ProductGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("ProfitFood.Model.DBModel.Product", b =>
                {
                    b.HasOne("ProfitFood.Model.DBModel.BaseUnit", "BaseUnit")
                        .WithMany("Products")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfitFood.Model.DBModel.BaseUnitStorage", "BaseUnitStorage")
                        .WithMany("Products")
                        .HasForeignKey("BaseUnitStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfitFood.Model.DBModel.ProductGroup", "Group")
                        .WithMany("Products")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseUnit");

                    b.Navigation("BaseUnitStorage");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ProfitFood.Model.DBModel.BaseUnit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProfitFood.Model.DBModel.BaseUnitStorage", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProfitFood.Model.DBModel.ProductGroup", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
